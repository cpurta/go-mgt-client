// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Joingo/go-mgt-client (interfaces: Client)

// Package mock_go_mgt_client is a generated GoMock package.
package mock_go_mgt_client

import (
	go_mgt_client "github.com/Joingo/go-mgt-client"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetDrawings mocks base method
func (m *MockClient) GetDrawings(arg0 string) (*go_mgt_client.AvailableDrawings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDrawings", arg0)
	ret0, _ := ret[0].(*go_mgt_client.AvailableDrawings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDrawings indicates an expected call of GetDrawings
func (mr *MockClientMockRecorder) GetDrawings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDrawings", reflect.TypeOf((*MockClient)(nil).GetDrawings), arg0)
}

// GetOffers mocks base method
func (m *MockClient) GetOffers(arg0, arg1 string) ([]*go_mgt_client.Offer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOffers", arg0, arg1)
	ret0, _ := ret[0].([]*go_mgt_client.Offer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOffers indicates an expected call of GetOffers
func (mr *MockClientMockRecorder) GetOffers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOffers", reflect.TypeOf((*MockClient)(nil).GetOffers), arg0, arg1)
}

// GetPlayerDrawings mocks base method
func (m *MockClient) GetPlayerDrawings(arg0, arg1 string) ([]*go_mgt_client.PlayerDrawing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayerDrawings", arg0, arg1)
	ret0, _ := ret[0].([]*go_mgt_client.PlayerDrawing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayerDrawings indicates an expected call of GetPlayerDrawings
func (mr *MockClientMockRecorder) GetPlayerDrawings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerDrawings", reflect.TypeOf((*MockClient)(nil).GetPlayerDrawings), arg0, arg1)
}

// GetPlayerPromotions mocks base method
func (m *MockClient) GetPlayerPromotions(arg0, arg1 string) ([]*go_mgt_client.PlayerPromotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayerPromotions", arg0, arg1)
	ret0, _ := ret[0].([]*go_mgt_client.PlayerPromotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayerPromotions indicates an expected call of GetPlayerPromotions
func (mr *MockClientMockRecorder) GetPlayerPromotions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerPromotions", reflect.TypeOf((*MockClient)(nil).GetPlayerPromotions), arg0, arg1)
}

// GetPromotions mocks base method
func (m *MockClient) GetPromotions(arg0 string) ([]*go_mgt_client.PlayerPromotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPromotions", arg0)
	ret0, _ := ret[0].([]*go_mgt_client.PlayerPromotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPromotions indicates an expected call of GetPromotions
func (mr *MockClientMockRecorder) GetPromotions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPromotions", reflect.TypeOf((*MockClient)(nil).GetPromotions), arg0)
}

// PlayerDrawingCheckIn mocks base method
func (m *MockClient) PlayerDrawingCheckIn(arg0, arg1, arg2 string) (*go_mgt_client.CheckIn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlayerDrawingCheckIn", arg0, arg1, arg2)
	ret0, _ := ret[0].(*go_mgt_client.CheckIn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlayerDrawingCheckIn indicates an expected call of PlayerDrawingCheckIn
func (mr *MockClientMockRecorder) PlayerDrawingCheckIn(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlayerDrawingCheckIn", reflect.TypeOf((*MockClient)(nil).PlayerDrawingCheckIn), arg0, arg1, arg2)
}
